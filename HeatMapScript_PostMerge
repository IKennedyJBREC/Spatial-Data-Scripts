import arcpy
from arcpy import os
from csv import reader
import numpy as np
import re

filepath_current = input("File Path: ")
filepath_traveltimes = "C:\Users\ikenn\OneDrive - University of Massachusetts\Documents - FFRC_TPO\Ian's TPO Docs\MLHeatMap\TravelTimeAreas\TravelTimeAreas.gdb"

Merge = "Geocoded_Merge"
#populate new field with string values of procurement radius
arcpy.management.CalculateField(Merge, "Pro_Rad_Final", 'str(!Pro_Rad!) + " MILES"', "PYTHON3", '', "TEXT", "NO_ENFORCE_DOMAINS")

Buffer = "Geocoded_Merge_ProRad" 

#buffer addresses using procurement radius.
arcpy.analysis.Buffer(Merge, Buffer, "Pro_Rad_Final", "FULL", "ROUND", "NONE", None, "PLANAR")

#clip buffers to USA outline.
arcpy.analysis.Clip(Buffer, "USA", "Merged_Buff_Clip", None)
arcpy.management.CalculateField("Merged_Buff_Clip", "ID_Val", "!OBJECTID!", "PYTHON3", '', "TEXT", "NO_ENFORCE_DOMAINS")

arcpy.analysis.SplitByAttributes("Merged_Buff_Clip", r"C:\Users\ikenn\Documents\TravelTimeLayout\Unmatched.gdb", "TPOID")
#After this step, add all shapefiles from folder

#Find # of mills geocoded and store as MillNumber
#"OBJECT_ID"
with arcpy.da.SearchCursor("Merged_Buff_Clip", "TPOID") as cursor:
    x = []
    for i in cursor:
        x.append(i)
MillNumber = len(x)
MillNumber

IDFormat = r'\d+-2021-\d+-\d+'
IDFormat2 = r'\d+_2021_\d+_\d+'

b = []
for i in x:
    b.append(str(i))
    next

c = []
for i in b:
    c.append(re.findall(IDFormat, i))
    next

d = np.array(c)
e = len(d)

f=[]
for i in range(e):
    f.append(re.sub("-", "_", str(c[i])))
    next

Final = []
for i in f:
    Final.append(re.findall(IDFormat2, i))
    next

FinalArray = np.array(Final)

# Traditional Clip
for i in range(e):
        arcpy.analysis.Clip(filepath_current+"\\T"+FinalArray[i,0], filepath_traveltimes+"\\T"+FinalArray[i,0], filepath_current+'\\T'+FinalArray[i,0]+"_Clip" , None)
# Or Pairwise Clip:
# for i in range(e):
#     with arcpy.EnvManager(scratchWorkspace=r"C:\Users\ikenn\Documents\TravelTimeLayout\TravelTimeLayout.gdb", outputCoordinateSystem='GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]]', workspace=r"C:\Users\ikenn\OneDrive - University of Massachusetts\Documents\MyProject2\MyProject2.gdb"):
#         arcpy.analysis.PairwiseClip(filepath_current+"\\T"+FinalArray[i,0], filepath_traveltimes+"\\T"+FinalArray[i,0], filepath_current+"\\T"+FinalArray[i,0]+"_Clip", None)

for i in range(e):
        with arcpy.EnvManager(outputCoordinateSystem='GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]]'):
            arcpy.conversion.PolygonToRaster(filepath_current+"\\T"+FinalArray[i,0]+"_Clip", "TOT_MCF", filepath_current+'\\Raster_T'+FinalArray[i,0], "CELL_CENTER", "NONE", 0.004, "DO_NOT_BUILD")

#Create string containing names of all rasters to be used in MosaictoNewRaster, store as MosaicString
MosaicString = ""
for i in range(e):
    if i == 0:
        MosaicString = ('Raster_T'+FinalArray[i,0])
    else:
        MosaicString+=(';Raster_T'+FinalArray[i,0])
        
#Then need to convert each vector to a raster using Mosaic to New Raster
arcpy.management.MosaicToNewRaster(MosaicString, filepath, "Summed_Raster", 'GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]]', "32_BIT_UNSIGNED", None, 1, "SUM", "FIRST")
